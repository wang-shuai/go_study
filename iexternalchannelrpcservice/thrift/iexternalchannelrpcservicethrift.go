// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type IExternalChannelRpcServiceThrift interface { //服务:外部渠道,描述:外部渠道

	// 方法:获取所有的渠道信息-带分组,描述:可能会超时，建议用str形式
	GetAllExternalChannelGroups() (r []*ExternalChannelGroup, err error)
	// 方法:获取所有的渠道信息-字符串形式返回,描述:
	GetAllExternalChannelGroupsStr() (r string, err error)
	// 方法:检索渠道信息,描述:code精确查找。name模糊搜索
	//
	// Parameters:
	//  - Name
	//  - Code
	Get2ndExternalChannelByNameAndCode(name string, code string) (r []*ExternalChannelItem, err error)
}

//服务:外部渠道,描述:外部渠道
type IExternalChannelRpcServiceThriftClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIExternalChannelRpcServiceThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IExternalChannelRpcServiceThriftClient {
	return &IExternalChannelRpcServiceThriftClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIExternalChannelRpcServiceThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IExternalChannelRpcServiceThriftClient {
	return &IExternalChannelRpcServiceThriftClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// 方法:获取所有的渠道信息-带分组,描述:可能会超时，建议用str形式
func (p *IExternalChannelRpcServiceThriftClient) GetAllExternalChannelGroups() (r []*ExternalChannelGroup, err error) {
	if err = p.sendGetAllExternalChannelGroups(); err != nil {
		return
	}
	return p.recvGetAllExternalChannelGroups()
}

func (p *IExternalChannelRpcServiceThriftClient) sendGetAllExternalChannelGroups() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAllExternalChannelGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IExternalChannelRpcServiceThriftClient) recvGetAllExternalChannelGroups() (value []*ExternalChannelGroup, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetAllExternalChannelGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAllExternalChannelGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAllExternalChannelGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAllExternalChannelGroups failed: invalid message type")
		return
	}
	result := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 方法:获取所有的渠道信息-字符串形式返回,描述:
func (p *IExternalChannelRpcServiceThriftClient) GetAllExternalChannelGroupsStr() (r string, err error) {
	if err = p.sendGetAllExternalChannelGroupsStr(); err != nil {
		return
	}
	return p.recvGetAllExternalChannelGroupsStr()
}

func (p *IExternalChannelRpcServiceThriftClient) sendGetAllExternalChannelGroupsStr() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetAllExternalChannelGroupsStr", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IExternalChannelRpcServiceThriftClient) recvGetAllExternalChannelGroupsStr() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetAllExternalChannelGroupsStr" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetAllExternalChannelGroupsStr failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetAllExternalChannelGroupsStr failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetAllExternalChannelGroupsStr failed: invalid message type")
		return
	}
	result := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// 方法:检索渠道信息,描述:code精确查找。name模糊搜索
//
// Parameters:
//  - Name
//  - Code
func (p *IExternalChannelRpcServiceThriftClient) Get2ndExternalChannelByNameAndCode(name string, code string) (r []*ExternalChannelItem, err error) {
	if err = p.sendGet2ndExternalChannelByNameAndCode(name, code); err != nil {
		return
	}
	return p.recvGet2ndExternalChannelByNameAndCode()
}

func (p *IExternalChannelRpcServiceThriftClient) sendGet2ndExternalChannelByNameAndCode(name string, code string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Get2ndExternalChannelByNameAndCode", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs{
		Name: name,
		Code: code,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IExternalChannelRpcServiceThriftClient) recvGet2ndExternalChannelByNameAndCode() (value []*ExternalChannelItem, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Get2ndExternalChannelByNameAndCode" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Get2ndExternalChannelByNameAndCode failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Get2ndExternalChannelByNameAndCode failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error6 error
		error6, err = error5.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error6
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Get2ndExternalChannelByNameAndCode failed: invalid message type")
		return
	}
	result := IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type IExternalChannelRpcServiceThriftProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IExternalChannelRpcServiceThrift
}

func (p *IExternalChannelRpcServiceThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IExternalChannelRpcServiceThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IExternalChannelRpcServiceThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIExternalChannelRpcServiceThriftProcessor(handler IExternalChannelRpcServiceThrift) *IExternalChannelRpcServiceThriftProcessor {

	self7 := &IExternalChannelRpcServiceThriftProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self7.processorMap["GetAllExternalChannelGroups"] = &iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroups{handler: handler}
	self7.processorMap["GetAllExternalChannelGroupsStr"] = &iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroupsStr{handler: handler}
	self7.processorMap["Get2ndExternalChannelByNameAndCode"] = &iExternalChannelRpcServiceThriftProcessorGet2ndExternalChannelByNameAndCode{handler: handler}
	return self7
}

func (p *IExternalChannelRpcServiceThriftProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x8

}

type iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroups struct {
	handler IExternalChannelRpcServiceThrift
}

func (p *iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllExternalChannelGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult{}
	var retval []*ExternalChannelGroup
	var err2 error
	if retval, err2 = p.handler.GetAllExternalChannelGroups(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllExternalChannelGroups: "+err2.Error())
		oprot.WriteMessageBegin("GetAllExternalChannelGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllExternalChannelGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroupsStr struct {
	handler IExternalChannelRpcServiceThrift
}

func (p *iExternalChannelRpcServiceThriftProcessorGetAllExternalChannelGroupsStr) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllExternalChannelGroupsStr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetAllExternalChannelGroupsStr(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllExternalChannelGroupsStr: "+err2.Error())
		oprot.WriteMessageBegin("GetAllExternalChannelGroupsStr", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllExternalChannelGroupsStr", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iExternalChannelRpcServiceThriftProcessorGet2ndExternalChannelByNameAndCode struct {
	handler IExternalChannelRpcServiceThrift
}

func (p *iExternalChannelRpcServiceThriftProcessorGet2ndExternalChannelByNameAndCode) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Get2ndExternalChannelByNameAndCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult{}
	var retval []*ExternalChannelItem
	var err2 error
	if retval, err2 = p.handler.Get2ndExternalChannelByNameAndCode(args.Name, args.Code); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Get2ndExternalChannelByNameAndCode: "+err2.Error())
		oprot.WriteMessageBegin("Get2ndExternalChannelByNameAndCode", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Get2ndExternalChannelByNameAndCode", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs struct {
}

func NewIExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs() *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs {
	return &IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs{}
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllExternalChannelGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult struct {
	Success []*ExternalChannelGroup `thrift:"success,0" json:"success,omitempty"`
}

func NewIExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult() *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult {
	return &IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult{}
}

var IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult_Success_DEFAULT []*ExternalChannelGroup

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) GetSuccess() []*ExternalChannelGroup {
	return p.Success
}
func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExternalChannelGroup, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ExternalChannelGroup{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Success = append(p.Success, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllExternalChannelGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsResult(%+v)", *p)
}

type IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs struct {
}

func NewIExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs() *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs {
	return &IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs{}
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllExternalChannelGroupsStr_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewIExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult() *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult {
	return &IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult{}
}

var IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult_Success_DEFAULT string

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetAllExternalChannelGroupsStr_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGetAllExternalChannelGroupsStrResult(%+v)", *p)
}

// Attributes:
//  - Name
//  - Code
type IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs struct {
	Name string `thrift:"name,1" json:"name"`
	Code string `thrift:"code,2" json:"code"`
}

func NewIExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs() *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs {
	return &IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs{}
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) GetName() string {
	return p.Name
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) GetCode() string {
	return p.Code
}
func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get2ndExternalChannelByNameAndCode_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err)
	}
	if err := oprot.WriteString(string(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err)
	}
	return err
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult struct {
	Success []*ExternalChannelItem `thrift:"success,0" json:"success,omitempty"`
}

func NewIExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult() *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult {
	return &IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult{}
}

var IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult_Success_DEFAULT []*ExternalChannelItem

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) GetSuccess() []*ExternalChannelItem {
	return p.Success
}
func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExternalChannelItem, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ExternalChannelItem{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Success = append(p.Success, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Get2ndExternalChannelByNameAndCode_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IExternalChannelRpcServiceThriftGet2ndExternalChannelByNameAndCodeResult(%+v)", *p)
}
