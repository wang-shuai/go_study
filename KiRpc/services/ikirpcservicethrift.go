// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type IKiRpcServiceThrift interface {
	GetKiLicenseCities() (r []*ViewKiLicenseCity, err error)
	GetKiLicenseCityGroups() (r []*ViewKiLicenseCityGroup, err error)
}

type IKiRpcServiceThriftClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIKiRpcServiceThriftClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IKiRpcServiceThriftClient {
	return &IKiRpcServiceThriftClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIKiRpcServiceThriftClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IKiRpcServiceThriftClient {
	return &IKiRpcServiceThriftClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *IKiRpcServiceThriftClient) GetKiLicenseCities() (r []*ViewKiLicenseCity, err error) {
	if err = p.sendGetKiLicenseCities(); err != nil {
		return
	}
	return p.recvGetKiLicenseCities()
}

func (p *IKiRpcServiceThriftClient) sendGetKiLicenseCities() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetKiLicenseCities", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IKiRpcServiceThriftGetKiLicenseCitiesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IKiRpcServiceThriftClient) recvGetKiLicenseCities() (value []*ViewKiLicenseCity, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetKiLicenseCities" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetKiLicenseCities failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetKiLicenseCities failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetKiLicenseCities failed: invalid message type")
		return
	}
	result := IKiRpcServiceThriftGetKiLicenseCitiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

func (p *IKiRpcServiceThriftClient) GetKiLicenseCityGroups() (r []*ViewKiLicenseCityGroup, err error) {
	if err = p.sendGetKiLicenseCityGroups(); err != nil {
		return
	}
	return p.recvGetKiLicenseCityGroups()
}

func (p *IKiRpcServiceThriftClient) sendGetKiLicenseCityGroups() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetKiLicenseCityGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IKiRpcServiceThriftGetKiLicenseCityGroupsArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IKiRpcServiceThriftClient) recvGetKiLicenseCityGroups() (value []*ViewKiLicenseCityGroup, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetKiLicenseCityGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetKiLicenseCityGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetKiLicenseCityGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetKiLicenseCityGroups failed: invalid message type")
		return
	}
	result := IKiRpcServiceThriftGetKiLicenseCityGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type IKiRpcServiceThriftProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IKiRpcServiceThrift
}

func (p *IKiRpcServiceThriftProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IKiRpcServiceThriftProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IKiRpcServiceThriftProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIKiRpcServiceThriftProcessor(handler IKiRpcServiceThrift) *IKiRpcServiceThriftProcessor {

	self5 := &IKiRpcServiceThriftProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self5.processorMap["GetKiLicenseCities"] = &iKiRpcServiceThriftProcessorGetKiLicenseCities{handler: handler}
	self5.processorMap["GetKiLicenseCityGroups"] = &iKiRpcServiceThriftProcessorGetKiLicenseCityGroups{handler: handler}
	return self5
}

func (p *IKiRpcServiceThriftProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x6.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x6

}

type iKiRpcServiceThriftProcessorGetKiLicenseCities struct {
	handler IKiRpcServiceThrift
}

func (p *iKiRpcServiceThriftProcessorGetKiLicenseCities) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IKiRpcServiceThriftGetKiLicenseCitiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetKiLicenseCities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IKiRpcServiceThriftGetKiLicenseCitiesResult{}
	var retval []*ViewKiLicenseCity
	var err2 error
	if retval, err2 = p.handler.GetKiLicenseCities(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetKiLicenseCities: "+err2.Error())
		oprot.WriteMessageBegin("GetKiLicenseCities", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetKiLicenseCities", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type iKiRpcServiceThriftProcessorGetKiLicenseCityGroups struct {
	handler IKiRpcServiceThrift
}

func (p *iKiRpcServiceThriftProcessorGetKiLicenseCityGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IKiRpcServiceThriftGetKiLicenseCityGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetKiLicenseCityGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IKiRpcServiceThriftGetKiLicenseCityGroupsResult{}
	var retval []*ViewKiLicenseCityGroup
	var err2 error
	if retval, err2 = p.handler.GetKiLicenseCityGroups(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetKiLicenseCityGroups: "+err2.Error())
		oprot.WriteMessageBegin("GetKiLicenseCityGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetKiLicenseCityGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type IKiRpcServiceThriftGetKiLicenseCitiesArgs struct {
}

func NewIKiRpcServiceThriftGetKiLicenseCitiesArgs() *IKiRpcServiceThriftGetKiLicenseCitiesArgs {
	return &IKiRpcServiceThriftGetKiLicenseCitiesArgs{}
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetKiLicenseCities_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IKiRpcServiceThriftGetKiLicenseCitiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IKiRpcServiceThriftGetKiLicenseCitiesResult struct {
	Success []*ViewKiLicenseCity `thrift:"success,0" json:"success,omitempty"`
}

func NewIKiRpcServiceThriftGetKiLicenseCitiesResult() *IKiRpcServiceThriftGetKiLicenseCitiesResult {
	return &IKiRpcServiceThriftGetKiLicenseCitiesResult{}
}

var IKiRpcServiceThriftGetKiLicenseCitiesResult_Success_DEFAULT []*ViewKiLicenseCity

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) GetSuccess() []*ViewKiLicenseCity {
	return p.Success
}
func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ViewKiLicenseCity, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &ViewKiLicenseCity{}
		if err := _elem7.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.Success = append(p.Success, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetKiLicenseCities_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IKiRpcServiceThriftGetKiLicenseCitiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IKiRpcServiceThriftGetKiLicenseCitiesResult(%+v)", *p)
}

type IKiRpcServiceThriftGetKiLicenseCityGroupsArgs struct {
}

func NewIKiRpcServiceThriftGetKiLicenseCityGroupsArgs() *IKiRpcServiceThriftGetKiLicenseCityGroupsArgs {
	return &IKiRpcServiceThriftGetKiLicenseCityGroupsArgs{}
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetKiLicenseCityGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IKiRpcServiceThriftGetKiLicenseCityGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IKiRpcServiceThriftGetKiLicenseCityGroupsResult struct {
	Success []*ViewKiLicenseCityGroup `thrift:"success,0" json:"success,omitempty"`
}

func NewIKiRpcServiceThriftGetKiLicenseCityGroupsResult() *IKiRpcServiceThriftGetKiLicenseCityGroupsResult {
	return &IKiRpcServiceThriftGetKiLicenseCityGroupsResult{}
}

var IKiRpcServiceThriftGetKiLicenseCityGroupsResult_Success_DEFAULT []*ViewKiLicenseCityGroup

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) GetSuccess() []*ViewKiLicenseCityGroup {
	return p.Success
}
func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ViewKiLicenseCityGroup, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &ViewKiLicenseCityGroup{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Success = append(p.Success, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetKiLicenseCityGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IKiRpcServiceThriftGetKiLicenseCityGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IKiRpcServiceThriftGetKiLicenseCityGroupsResult(%+v)", *p)
}
