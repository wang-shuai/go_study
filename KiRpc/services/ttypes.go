// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package services

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - GroupName
//  - Cities
type ViewKiLicenseCityGroup struct {
	GroupName string               `thrift:"GroupName,1" json:"GroupName"`
	Cities    []*ViewKiLicenseCity `thrift:"Cities,2" json:"Cities"`
}

func NewViewKiLicenseCityGroup() *ViewKiLicenseCityGroup {
	return &ViewKiLicenseCityGroup{}
}

func (p *ViewKiLicenseCityGroup) GetGroupName() string {
	return p.GroupName
}

func (p *ViewKiLicenseCityGroup) GetCities() []*ViewKiLicenseCity {
	return p.Cities
}
func (p *ViewKiLicenseCityGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ViewKiLicenseCityGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *ViewKiLicenseCityGroup) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ViewKiLicenseCity, 0, size)
	p.Cities = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &ViewKiLicenseCity{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Cities = append(p.Cities, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ViewKiLicenseCityGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ViewKiLicenseCityGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ViewKiLicenseCityGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GroupName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:GroupName: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.GroupName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:GroupName: ", p), err)
	}
	return err
}

func (p *ViewKiLicenseCityGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Cities", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Cities: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cities)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Cities {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Cities: ", p), err)
	}
	return err
}

func (p *ViewKiLicenseCityGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewKiLicenseCityGroup(%+v)", *p)
}

// Attributes:
//  - CitySpell
//  - BuyCarCity
//  - LicenseCity
type ViewKiLicenseCity struct {
	CitySpell   string `thrift:"CitySpell,1" json:"CitySpell"`
	BuyCarCity  string `thrift:"BuyCarCity,2" json:"BuyCarCity"`
	LicenseCity string `thrift:"LicenseCity,3" json:"LicenseCity"`
}

func NewViewKiLicenseCity() *ViewKiLicenseCity {
	return &ViewKiLicenseCity{}
}

func (p *ViewKiLicenseCity) GetCitySpell() string {
	return p.CitySpell
}

func (p *ViewKiLicenseCity) GetBuyCarCity() string {
	return p.BuyCarCity
}

func (p *ViewKiLicenseCity) GetLicenseCity() string {
	return p.LicenseCity
}
func (p *ViewKiLicenseCity) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ViewKiLicenseCity) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CitySpell = v
	}
	return nil
}

func (p *ViewKiLicenseCity) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BuyCarCity = v
	}
	return nil
}

func (p *ViewKiLicenseCity) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LicenseCity = v
	}
	return nil
}

func (p *ViewKiLicenseCity) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ViewKiLicenseCity"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ViewKiLicenseCity) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CitySpell", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CitySpell: ", p), err)
	}
	if err := oprot.WriteString(string(p.CitySpell)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CitySpell (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CitySpell: ", p), err)
	}
	return err
}

func (p *ViewKiLicenseCity) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BuyCarCity", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BuyCarCity: ", p), err)
	}
	if err := oprot.WriteString(string(p.BuyCarCity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.BuyCarCity (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BuyCarCity: ", p), err)
	}
	return err
}

func (p *ViewKiLicenseCity) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("LicenseCity", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:LicenseCity: ", p), err)
	}
	if err := oprot.WriteString(string(p.LicenseCity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.LicenseCity (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:LicenseCity: ", p), err)
	}
	return err
}

func (p *ViewKiLicenseCity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewKiLicenseCity(%+v)", *p)
}
